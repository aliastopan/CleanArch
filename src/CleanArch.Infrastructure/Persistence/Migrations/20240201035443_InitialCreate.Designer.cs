// <auto-generated />
using System;
using System.Collections.Generic;
using CleanArch.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanArch.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240201035443_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CleanArch.Domain.Aggregates.Identity.RefreshToken", b =>
                {
                    b.Property<Guid>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("refresh_token_id");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<DateTimeOffset>("ExpiryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expiry_date");

                    b.Property<Guid>("FkUserAccountId")
                        .HasColumnType("char(36)")
                        .HasColumnName("fk_user_account_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsInvalidated")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_invalidated");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_used");

                    b.Property<string>("Jti")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("jti");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("token");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("FkUserAccountId");

                    b.ToTable("dbo.refresh_token", (string)null);
                });

            modelBuilder.Entity("CleanArch.Domain.Aggregates.Identity.UserAccount", b =>
                {
                    b.Property<Guid>("UserAccountId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("user_account_id");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creation_date");

                    b.Property<Guid>("FkUserProfileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("fk_user_profile_id");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_verified");

                    b.Property<DateTimeOffset>("LastSignedIn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_signed_in");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("password_salt");

                    b.ComplexProperty<Dictionary<string, object>>("User", "CleanArch.Domain.Aggregates.Identity.UserAccount.User#User", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("varchar(255)")
                                .HasColumnName("email_address");

                            b1.Property<string>("UserPrivileges")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("user_privileges");

                            b1.Property<int>("UserRole")
                                .HasColumnType("int")
                                .HasColumnName("user_role");

                            b1.Property<string>("Username")
                                .IsRequired()
                                .HasMaxLength(16)
                                .HasColumnType("varchar(16)")
                                .HasColumnName("username");
                        });

                    b.HasKey("UserAccountId");

                    b.ToTable("dbo.user_account", (string)null);
                });

            modelBuilder.Entity("CleanArch.Domain.Aggregates.Identity.UserProfile", b =>
                {
                    b.Property<Guid>("UserProfileId")
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("user_profile_id");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("last_name");

                    b.HasKey("UserProfileId");

                    b.ToTable("dbo.user_profile", (string)null);
                });

            modelBuilder.Entity("CleanArch.Domain.Aggregates.Identity.RefreshToken", b =>
                {
                    b.HasOne("CleanArch.Domain.Aggregates.Identity.UserAccount", "UserAccount")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("FkUserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("CleanArch.Domain.Aggregates.Identity.UserProfile", b =>
                {
                    b.HasOne("CleanArch.Domain.Aggregates.Identity.UserAccount", null)
                        .WithOne("UserProfile")
                        .HasForeignKey("CleanArch.Domain.Aggregates.Identity.UserProfile", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArch.Domain.Aggregates.Identity.UserAccount", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
